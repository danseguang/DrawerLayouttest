package view;

import android.content.Context;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by 宇 on 2015/7/20.
 */
public class FlowLayout extends ViewGroup {

    //三个构造方法全部转移到 含有3个参数的构造器
    public FlowLayout(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    public FlowLayout(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public FlowLayout(Context context) {
        this(context, null);
    }

    //测量宽高
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    {
        int sizeWidth = MeasureSpec.getSize(widthMeasureSpec);
        int modeWidth = MeasureSpec.getMode(widthMeasureSpec);
        int sizeHeight = MeasureSpec.getSize(heightMeasureSpec);
        int modeHeight = MeasureSpec.getMode(heightMeasureSpec);

        //wrap_content
        int width = 0;
        int height = 0;

        //记录每一行的宽度和高度
        int lineWidth = 0;
        int lineHeight = 0;

        //得到内部元素的个数
        int cCount = getChildCount();

        for(int i = 0; i < cCount; i++){
            View child = getChildAt(i);

            //测量子view的宽和高
            measureChild(child, widthMeasureSpec, heightMeasureSpec);
            //得到LayoutParams 具体情况要随之改变的！！！ 在写这句代码之前，我们已经预先定义了generateLayoutParams 里的返回值是MarginLayoutParams
            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();
            //子view占据的宽度
            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
            //子view占据的高度
            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;

            //换行
            if(lineWidth + childWidth > sizeWidth - getPaddingLeft() - getPaddingRight())
            {
                //对比得到最大宽度
                width = Math.max(width, lineWidth);
                //重置lineWidth
                lineWidth = childWidth;
                //记录行高
                height += lineHeight;
                lineHeight = childHeight;
            }
            else
            {
                //叠加行宽
                lineWidth += childWidth;
                //得到当前行最大的高度
                lineHeight = Math.max(lineHeight, childHeight);
            }
            //最后一个控件 注意 cCount要进行“减1”
            if(i == cCount - 1){
                width = Math.max(lineWidth, width);
                height += lineHeight;
            }
        }

        Log.e("TAG", "SizeWidth = " + sizeWidth);
        Log.e("TAG", "SizeHeight = " + sizeHeight);
        //wrap_content
//        if(modeWidth == MeasureSpec.AT_MOST)
//        {
//            setMeasuredDimension(width + getPaddingLeft() + getPaddingRight(), height + getPaddingTop()+ getPaddingBottom());
//        }
//        else
//        {
//            setMeasuredDimension(sizeWidth, sizeHeight);
//        }
        //简写 wrap_content
        setMeasuredDimension(
                //
                modeWidth == MeasureSpec.EXACTLY ? sizeWidth : width + getPaddingLeft() + getPaddingRight(),
                modeHeight == MeasureSpec.EXACTLY ? sizeHeight : height + getPaddingTop()+ getPaddingBottom()//
        );
//        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }

    //存储所有的View（以行为单位）
    private List<List<View>> mAllViews = new ArrayList<List<View>>();
    //每一行的高度
    private List<Integer> mLineHeight = new ArrayList<Integer>();


    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b){


        mAllViews.clear();
        mLineHeight.clear();

        //当前ViewGroup的宽度
        int width = getWidth();

        int lineWidth = 0;
        int lineHeight = 0;

        List<View> lineViews = new ArrayList<View>();

        int cCount = getChildCount();

        for(int i = 0; i < cCount; i++){
            View child = getChildAt(i);
            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();

            int childWidth = child.getMeasuredWidth();
            int childHeight = child.getMeasuredHeight();

            //如果需要换行
            if(childWidth + lineWidth + lp.leftMargin + lp.rightMargin > width)
            {
                //记录LineHeight
                mLineHeight.add(lineHeight);;
                //记录当前行的Views
                mAllViews.add(lineViews);

                //重置我们的行宽和行高
                lineWidth = 0;
                lineHeight = childHeight + lp.topMargin + lp.bottomMargin;
                //重置我们的View集合
                lineViews = new ArrayList<View>();

            }
            lineWidth += childWidth + lp.leftMargin + lp.rightMargin; // +=
            lineHeight = Math.max(lineHeight, childHeight + lp.topMargin + lp.bottomMargin);

            lineViews.add(child);
        }//for end

        //处理最后一行
        mLineHeight.add(lineHeight);
        mAllViews.add(lineViews);

        //设置子view的位置
        int left = getPaddingLeft();
        int top = getPaddingTop();

        //行数
        int lineNum = mAllViews.size();

        //扫每一行，把当前行的元素装进lineViews数组，把高度记录到lineHeight
        for(int i = 0; i< lineNum;i++)
        {
            //当前行的所有View
            lineViews = mAllViews.get(i);
            lineHeight = mLineHeight.get(i);

            //在当前行，遍历每一个child， 设定该child 的位置等等
            for(int j = 0; j < lineViews.size(); j++)
            {
                View child = lineViews.get(j);
                //判断child的状态， 若没显示，就不管这个child
                if(child.getVisibility() == View.GONE)
                {
                    continue;
                }
                MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();

                //命名原则： leftChild
                int lc = left + lp.leftMargin;
                int tc = top + lp.topMargin;
                int rc = lc + child.getMeasuredWidth();
                int bc = tc +child.getMeasuredHeight();

                //为子view进行布局
                child.layout(lc, tc, rc, bc);

                //对于相同行来说，他们只有“距离左侧的宽度”是不同的，因此我们需要把left 累加
                left += child.getMeasuredWidth() + lp.leftMargin+ lp.rightMargin;
            }

            //当遍历完一行时，重置“距左侧的距离”，并累加top
            left = getPaddingLeft();
            top += lineHeight;

        }


    }


    //与当前ViewGroup对应的LayoutParams
    @Override
    public LayoutParams generateLayoutParams(AttributeSet attrs) {
        return new MarginLayoutParams(getContext(), attrs);
    }

}
